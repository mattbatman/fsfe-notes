{"version":3,"sources":["webpack:///./src/components/Nav.tsx","webpack:///./src/components/NavButton.tsx","webpack:///./src/components/Breadcrumb.tsx","webpack:///./src/components/Layout.tsx","webpack:///./src/templates/notesTemplate.tsx","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.array.find-index.js"],"names":["NavRenderer","allMarkdownRemark","isOpen","allFrontmatter","edges","map","node","frontmatter","className","title","path","key","to","Nav","query","render","results","NavButton","isNavOpen","setIsNavOpen","onClick","BreadcrumbRenderer","currentPage","currentPageIndex","findIndex","fm","order","nextPage","previousPage","Breadcrumb","console","log","Layout","children","useState","role","Template","markdownRemark","data","html","dangerouslySetInnerHTML","__html","pageQuery","$export","$find","KEY","forced","Array","P","F","callbackfn","this","arguments","length","undefined"],"mappings":"6pJAyBMA,EAAc,SAAC,GAAkC,IAAhCC,EAAgC,EAAhCA,kBAAmBC,EAAa,EAAbA,OAElCC,EADYF,EAAVG,MACqBC,KAAI,qBAAGC,KAAQC,eAE5C,OACE,yBACEC,UAAS,0KACPN,EAAS,UAAY,cAGvB,wBAAIM,UAAU,UACXL,EAAeE,KAAI,gBAAGI,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OAClB,wBAAIC,IAAKF,EAAOD,UAAU,gBACxB,kBAAC,OAAD,CAAMI,GAAIF,GAAOD,UAQdI,EA3CH,SAAC,GAAD,IAAGX,EAAH,EAAGA,OAAH,OACV,kBAAC,cAAD,CACEY,MAAK,YAgBLC,OAAQ,SAACC,GAAD,OAAa,kBAAC,EAAD,eAAad,OAAQA,GAAYc,KAjBxD,UCSaC,EAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAd,OAChB,yBACEX,UAAS,cAAeU,EAAY,QAAU,IAC9CE,QAAS,kBAAMD,GAAcD,KAE7B,8BACA,8BACA,gC,wBCmBEG,EAAqB,SAAC,GAAuC,IAArCpB,EAAqC,EAArCA,kBAAmBqB,EAAkB,EAAlBA,YAEzCnB,EADYF,EAAVG,MACqBC,KAAI,qBAAGC,KAAQC,eACtCgB,EAAmBpB,EAAeqB,WACtC,SAACC,GAAD,OAAQA,EAAGC,QAAUJ,KAEjBK,EAAWxB,EAAeoB,EAAmB,GAC/CpB,EAAeoB,EAAmB,GAClC,KACEK,EAAezB,EAAeoB,EAAmB,GACnDpB,EAAeoB,EAAmB,GAClC,KAEJ,OACE,4BAAQf,UAAU,YACfoB,EACC,kBAAC,OAAD,CAAMhB,GAAIgB,EAAalB,KAAMF,UAAU,4BAAvC,KACSoB,EAAanB,OAEpB,KACHkB,EACC,kBAAC,OAAD,CAAMf,GAAIe,EAASjB,KAAMF,UAAU,6BAChCmB,EAASlB,MADZ,MAGE,OAKKoB,EAtDI,SAAC,GAAD,IAAGP,EAAH,EAAGA,YAAH,OACjB,kBAAC,cAAD,CACER,MAAK,aAiBLC,OAAQ,SAACC,GAAD,OACN,kBAAC,EAAD,eAAoBM,YAAaA,GAAiBN,KAnBtD,UCCFc,QAAQC,IAAI,eAEZ,IAiBeC,EAjBA,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,SAAUP,EAAY,EAAZA,MAAY,EACJQ,oBAAS,GAApChB,EAD+B,KACpBC,EADoB,KAGtC,OACE,yBAAKX,UAAU,kBACb,kBAAC,EAAD,CAAKN,OAAQgB,IACb,kBAAC,EAAD,CAAWA,UAAWA,EAAWC,aAAcA,IAC/C,yBAAKX,UAAU,mCACb,0BAAM2B,KAAK,OAAO3B,UAAU,QACzByB,GAEH,kBAAC,EAAD,CAAYX,YAAaI,OCZlB,SAASU,EAAT,GAA4B,IACjCC,EADiC,EAARC,KACzBD,eACA9B,EAAsB8B,EAAtB9B,YAAagC,EAASF,EAATE,KACrB,OACE,kBAAC,EAAD,CAAQb,MAAOnB,EAAYmB,OACzB,wBAAIlB,UAAU,2BAA2BD,EAAYE,OACrD,yBACED,UAAU,eACVgC,wBAAyB,CAAEC,OAAQF,MAMpC,IAAMG,EAAY,c,kCClBzB,IAAIC,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,OAAR,CAA4B,GACpCC,EAAM,YACNC,GAAS,EAETD,IAAO,IAAIE,MAAM,GAAGF,IAAK,WAAcC,GAAS,KACpDH,EAAQA,EAAQK,EAAIL,EAAQM,EAAIH,EAAQ,QAAS,CAC/CtB,UAAW,SAAmB0B,GAC5B,OAAON,EAAMO,KAAMD,EAAYE,UAAUC,OAAS,EAAID,UAAU,QAAKE,MAGzE,EAAQ,OAAR,CAAiCT","file":"component---src-templates-notes-template-tsx-4ac17c0ae94b3b6d4877.js","sourcesContent":["import React from 'react';\nimport { StaticQuery, graphql, Link } from 'gatsby';\n\nconst Nav = ({ isOpen }) => (\n  <StaticQuery\n    query={graphql`\n      query NavQuery {\n        allMarkdownRemark(sort: { fields: [frontmatter___order], order: ASC }) {\n          totalCount\n          edges {\n            node {\n              id\n              frontmatter {\n                title\n                path\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={(results) => <NavRenderer isOpen={isOpen} {...results} />}\n  />\n);\n\nconst NavRenderer = ({ allMarkdownRemark, isOpen }) => {\n  const { edges } = allMarkdownRemark;\n  const allFrontmatter = edges.map(({ node: { frontmatter } }) => frontmatter);\n\n  return (\n    <nav\n      className={`Nav absolute md:sticky inset-0 h-screen overflow-y-auto pt-12 px-2 text-gray-800 font-semibold w-1/2 md:w-1/5 transition-transform duration-300 ease-in-out transform ${\n        isOpen ? 'is-open' : 'is-closed'\n      }`}\n    >\n      <ul className=\"w-full\">\n        {allFrontmatter.map(({ title, path }) => (\n          <li key={title} className=\"mb-2 text-sm\">\n            <Link to={path}>{title}</Link>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\n\nconst NavButton = ({ isNavOpen, setIsNavOpen }) => (\n  <div\n    className={`NavButton ${isNavOpen ? 'nav-x' : ''}`}\n    onClick={() => setIsNavOpen(!isNavOpen)}\n  >\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default NavButton;\n","import React from 'react';\nimport { StaticQuery, graphql, Link } from 'gatsby';\n\nconst Breadcrumb = ({ currentPage }) => (\n  <StaticQuery\n    query={graphql`\n      query BCQuery {\n        allMarkdownRemark(sort: { fields: [frontmatter___order], order: ASC }) {\n          totalCount\n          edges {\n            node {\n              id\n              frontmatter {\n                title\n                path\n                order\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={(results) => (\n      <BreadcrumbRenderer currentPage={currentPage} {...results} />\n    )}\n  />\n);\n\nconst BreadcrumbRenderer = ({ allMarkdownRemark, currentPage }) => {\n  const { edges } = allMarkdownRemark;\n  const allFrontmatter = edges.map(({ node: { frontmatter } }) => frontmatter);\n  const currentPageIndex = allFrontmatter.findIndex(\n    (fm) => fm.order === currentPage\n  );\n  const nextPage = allFrontmatter[currentPageIndex + 1]\n    ? allFrontmatter[currentPageIndex + 1]\n    : null;\n  const previousPage = allFrontmatter[currentPageIndex - 1]\n    ? allFrontmatter[currentPageIndex - 1]\n    : null;\n\n  return (\n    <footer className=\"clearfix\">\n      {previousPage ? (\n        <Link to={previousPage.path} className=\"text-blue-500 float-left\">\n          &#60; {previousPage.title}\n        </Link>\n      ) : null}\n      {nextPage ? (\n        <Link to={nextPage.path} className=\"text-blue-500 float-right\">\n          {nextPage.title} &#62;\n        </Link>\n      ) : null}\n    </footer>\n  );\n};\n\nexport default Breadcrumb;\n","import React, { useState } from 'react';\nimport Nav from './Nav';\nimport NavButton from './NavButton';\nimport Breadcrumb from './Breadcrumb';\n\nconsole.log('hello world');\n\nconst Layout = ({ children, order }) => {\n  const [isNavOpen, setIsNavOpen] = useState(false);\n\n  return (\n    <div className=\"Layout md:flex\">\n      <Nav isOpen={isNavOpen} />\n      <NavButton isNavOpen={isNavOpen} setIsNavOpen={setIsNavOpen} />\n      <div className=\"py-12 container w-full md:w-4/5\">\n        <main role=\"main\" className=\"mb-6\">\n          {children}\n        </main>\n        <Breadcrumb currentPage={order} />\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\n\n// the data prop will be injected by the GraphQL query below.\n// data.markdownRemark holds your post data\nexport default function Template({ data }) {\n  const { markdownRemark } = data;\n  const { frontmatter, html } = markdownRemark;\n  return (\n    <Layout order={frontmatter.order}>\n      <h1 className=\"text-3xl font-bold mb-2\">{frontmatter.title}</h1>\n      <div\n        className=\"note-content\"\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        path\n        title\n        order\n      }\n    }\n  }\n`;\n","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n"],"sourceRoot":""}